----------------------------------------
##Side work

Imutable vs Mutable type #str, int, float, bool, bytes e tuple são imutaveis, enquanto list, set, dict e outros são alias (referencias).


__________________________________________________________________________________________________________________________________________________________________________

COMEÇO CO CURSO REGULAR

Aula 1
Tuplas são imutaveis

Para utilizar o sorted() é necessário transformar tuplas em listas

Aula 2


Aula 3

Utilidade de list_comprehension: cria variáveis locais e já gera a lista com base na expressão demanda

exemplo
quadrados_List_Comprehension = [ i**2 for i in range (1,11)] #cria uma lista em que cada elemento será o resultado da operação i^2 para i no range de 1 a 10

#modelos de condicionais:
(1)

lista = [expressao for item in colecao]

# equivale a:
for item in colecao:
    lista.append(expressao)

(2)

[expressao for item in colecao if condicao]

# equivale a:
for item in colecao:
    if condicao:
        lista.append(expressao)

(3)
[expressao if condicao else expressao_alternativa for item in colecao] 

# equivale a:
for item in colecao:
    if condicao:
        lista.append(expressao)
    else:
        lista.append(expressao_alternativa)

#remove duplicados
List(set()) #o tipo set não tolera duplicadas, transformar em set e voltar para lista cria uma lista sem duplicados

Parei aula @46:00

#função map()
f = lambda x: x**2
map(f,lista) #aplica a função f a todos os valores da lista lista

#Função geradora é igual ao list comprehension, mas entre (). A função geradora após utilizada fica vazia 
next(funcao_geradora) #utiliza o próximo termo da função geradora 


@1:33