#Santander Coders 2023 - Módulo inicial, processo seletivo
## 01.GIT
Utilizar git, github e vsc

cd = change directory, use to change working directory

# Comandos GIT

git clone https://github.com/jlbmanetti/ALL.git

git init #Cria um git naquele diretório para versionamento

# Untracked --> Staged                 --> = Stage
# Unmodified --> Modified --> Staged   --> = Edit / Stage
# Staged --> Unmodified                --> = Commit
# Unmodified --> Untracked             --> = Remove

git add .\arquivo.txt #Passa o arquivo de untracked ou editado para staged
git diff e git diff --staged #Mostra as alterações no arquivo que está ou editado ou stagged

git commit -m "mensagem identificando a alteração"
git log #Mostra os commits e as mensagens

git restore .\arquivo.txt #Descarta alterações ainda em edit
git restore --staged .\arquivo.txt #Descarta alterações em staged e volta para edit

git push origin master  #Envia as alterações para o github

git pull #Baixa do github e faz um merge automatico
git fetch #Baixa do github e fica esperando você utilizar diff para comparar as alterações ou pull para o merge
git diff origin/master #origin é no github, master desktop

git branch nome_da_branch #Cria uma nova branch além da master
git checkout nome_da_branch #Troca o Head para a branch nome_da_branch ao invés da anterior (master)
git branch #mostra as branchs e também para qual o Head está apontado
git merge nome_da_branch #Estando em um branch, você da merge com nome_da_branch e ele junta arquivos diferentes, mas pode criar conflitos caso a alteração seja no mesmo arquivo

## 02.Redes e Sistemas

ipconfig #dados de rede da maquina
ipconfig /flushdns #limpa o cache de dns
ping google.com #testa o ping daquela conexão, envia 4 pacotes e mede tempo
nslookup google.com #procura o endereço ip pelo dns
tracert google.com #retorna todos os ips intermediários até chegar no google
route print
net stat #visualiza portas sendo utilizadas

cls #clear ALL

O que são portas após o ip?
Cisco Packet Tracker #Programa para criar/testar configurações de rede

## 03.Conteinerização com Docker
Utilizar docker desktop e vsc

docker --help #mostra Comandos

docker run -ti nginx -p 8081:8081   #ti = terminar interativo
                                    #run executa a imagem e se não tiver ela faz o pull automatico
                                    #nginx (?)
                                    #-p 8081:8081 define a porta que será utilizada por aquele docker

netstat # verifica conexões ip ativas

docker ps -a #lista de containers rodando e finalizado

ls #mostra os files dentro do diretório
mkdir #cria um novo diretório

code .\example-course-containers\ #abre outra aba do vsc

docker imagems #checa as imagens dentro daquele diretório
docker build -t minha-app:v1 . #controi o docker, precisa estar no diretorio do docker. -t cria um tag para versionamento. "." ao final indica que está nessa mesma pasta

#Volumes em docker servem para armazenar dados durante a execução da aplicação.

cd .. #volta uma pasta

#Aula de link de containers:
    #banco de dados
    docker run -e MYSQL_ROOT_PASSWORD=minha-senha --name db -v /app:/var/lib/mysql -d mysql:latest %-e define senha, --name define nome db, -v define volume para guardar dados, -d define a imagem mais recente
    docker ps %lista os dockers rodando

    #app
    docker run -e JOOMLA_DB_USER=root -e JOOMLA_DB_PASSWORD=minha-senha --name joomla --link db:mysql -p 8080:80 -d joomla:php8.0 %-e variáveis de ambiente, usuario e senha, --name nome joomla, --link linka com a base db; -p porta utilizada, -d versão utilizado do joomla
    docker ps

    #Acessando o joomla pelo container id e testando o ping entre ele e o db
    docker exec -ti 7f6b6c8738aa /bin/bash
    ping db %esse comando é executado pelo container joomla

traceroute # alternativa ao comando ping, retorna o "ping" de cada pacote enviado em cada etapa

code . #abre o diretório no vsc

#Docker-compose

docker-compose up -d #up inicia o docer-compose naquele diretorio e -d faz com que rode em background (nao mostra infos no prompt e não é encerrado ao fechar o prompt)
docker-compose ps #mostra as apis / containers em execução
docker-compose stop #para os containers, mas nao os Remove
docker-compose rm -f #remove os containers

## 0.4 Algoritmos

%Modelo - Teste de uso
comando no código | saída na tela | armazenamento(todas as var.)

Tipos de dados
n. inteiro
n. decimal (float)
string
booleano (1 ou 0)

## 0.5 Python
Utilizar: # para comentário
Utilizar:
'''
Para comentar um trecho de código
'''

print('texto', var)
var = input('texto requisição')
print(type(var)) #verifica o tipo de var int, float, str ou bool

#Operações matemáticas para lembrar:
// #divisão inteira
% #resto da divisão
** #potência

#Operadores booleanos:
>, <=, ==, !=, >=, > #retorna true ou false

#Conversão de tipo de dados
int(var) #converte var para inteiro
str(var) #converte var para string
float(var) #converte var para float
bool(var) #converte var para booleano

ctrl + C #Interrompe a execução do código

#Condicionais
(1)
if var operador condição: #pode-se utilizar também AND / OR
    ...
elif var operador condição:
    ...
else:
    ...

(2) While é útil quando o número de repetições/range não é definido
while var operador condição: #pode-se utilizar também AND / OR
    ...

(3) For é útil quando o número de repetições/range é definido
for i in range(n): #range from 0 to n-1
    ...

for i in range(0, n): #range from 0 to n-1
    ...

for i in range(0, n, s): #range from 0 to n-1 by steps of s size
    ...

Injeta uma variável dentro de uma string:
f'texto..{var}..texto :' #f antes da string e dentro variável fica entre {}

#Listas
Lista = [a, b, 2, 5,[a, c, d, e],10, a] #Listas podem ter diferentes tipos de dados e podem ter listas dentro delas
Lista = list() #converter em lista, será visto futuramente

var1 = Lista[0] #indexação começa sempre no 0;
varultima = Lista[-1] #retorna o ultimo item da lista

lista_0a2 = Lista[0:3] #retorna o range do índice 0 até o menor que 3
lista_2aofim = Lista[1:] #retorna o range do índice 1 até o fim
lista_2aofim = Lista[1:6:2] #retorna o range do índice 1 ao 6 pulando de 2 em 2

len(Lista) #retorna o número de elementos na lista

for i in range(len(Lista)): #percorrerá toda a lista
    print(Lista[i])

for i in Lista: #percorrerá toda a lista
    print(i)

#Comandos com listas
lista.append(var) #adicionar var ao final da lista
lista.insert(pos,var) #adiciona var na posicao pos da lista
lista.extend(lista2) #concatena a lista 2 à lista 1
lista.pop(pos) #remove a var na posição pos, se não expecificado remove o último termo
lista.remove(var) #remove sempre a primeira var=var na lista
lista.count(var) #conta o número de vars=var na lista
lista.index(var) #retorna a posição da var
lista.sort() #ordena a lista em ordem crescente ou decrescente (reverse=true)

len(lista) #número de elementos na lista
sum(lista) #soma todos os elementos da lista
max(lista) #var máxima na lista
min(lista) #var mínima na lista

#criando funções
def nome_da_funcao(var,var2='Python course'):
    print(f'Hello, {var}!')
    print(f'Your welcome to our {var2}')

def soma(num1,num2):
    return num1+num2 #return sempre define o valor como resultado da função e encerra a função

#Dicionários - funcionam para associar fortemente valores com respectivas chaves (funciona em pares)
dicionário = {}
dicionário = dict()
dicionário = {'nome':'claudio','idade':20}
idade = dicionário['idade'] #acessa-se o valor pela chave
dicionário['altura']=1.80 #como não existe essa chave no dicionário ele fará o 'append'; caso já exista, ele sobrescreve

for var in dicionário: #a variável sempre vai percorrer a chave do dicionário
    print(var) #imprime as chaves
    print(var,dicionário[chave]) #imprime a chave e o valor

chave in dicionário #retorna true ou false

## 0.5 Banco de dados

20 tipos de dados, deles:
-numeric #smallint, int, bigint, decimal
-texto #varchar (limite definido), char (n especifico), text (variavel infinito)
-data #date (padrao dia,mes, ano), outros tipos dão segundo/minuto/hora e fuso
-booleano #1 tipo

Diagrama de entidade e relacionamento - utilizando Visual Paradigm Online
primary key, foreign key #
one to one, one to many, many to many #relacionamentos
normalização de dados #pela aula, parece ser simplesmente bom senso em reduzir redundâncias na base, separando os dados sempre que necessário
dsads

#Comandos no PostgresSQL
create table tabela_professor( #cria a tabela ao executar a query
	id_professor integer, #nome da tabela e tipo de dado
	celular varchar(15),
	nome varchar(40),
	id_disciplina integer,
	primary key (id_professor), #define a chave primária
	foreign key (id_disciplina) #define a chave estrangeira
	references tabela_disciplina(id_disciplina) #referencia de qual tabela a chave estrangeira vem
)

insert into tabela_disciplina values #insere valores em uma tabela
(1, 'português','ementa português'), #registro com o formato da tabela criada (id, disciplina, ementa)
(2, 'física','ementa física'),
(3, 'matemática','ementa matemática');

select * from tabela_disciplina #mostra os dados da tabela_disciplina

F5 roda a query

copy tabela_disciplina(id_disciplina, nome, ementa) #copiar dados para a tabela de um arquivo csv
from 'C:\Program Files\PostgreSQL\14\arquivo.csv' #local do arquivo, postgres precisa ter acesso à essa pasta
delimiter ',' #o que separa as colunas
csv header #elimina a primeira linha

update tabela_disciplina set nome = 'física alterado' #aqui coloca-se o novo valor
where id_disciplina = 5 #especifica-se a referência de qual linha será alterado

delete from tabela_disciplina #remove a linha
where id_disciplina = 6 #especifica-se qual linha será removida

#em ambos os casos acima (update e delete), se não for especificado pelo where ele aplicará/removerá toda a tabela

#considerando aspectos de LGPD e segurança dos dados, é possível criar classes de perfis para acesso ao db

create view matricula_com_sigilo as   #criará uma máscara sobre a tabela especificada abaixo somente com os dados desejados
(
    select
        id_matricula, 
        nome                  #não pode ter virgula antes do from
    from tabela_disciplina
)

-- #comenta código na query

create index indice_nome on tabela_disciplina(nome) #cria um índice nesta tabela para a coluna nome de forma que o algorítimo de busca faça buscas mais rápidas
#downside de indices é que toda vez que um dado é adicionado na tabela ele terá que refazer o índice, gerando lentidão. Bom para tabelas com pouca alteração.

#data deve ser inserido entre aspas

## 0.6 Cloud computing

Imagem muito legal diferenciando On-site, IaaS, PaaS e SaaS. Progressivamente passando as tasks para a cloud. SaaS é full cloud.
IaaS - infrastructure as a service # infra, exemplo AWS EC2
PaaS - platform as a service # infra+plataforma, exemplo 
SaaS - software as a service # infra+plataforma+software, exemplo 

Detalhes AWS:
IAM - Gerenciador de usuários/permissões em cloud

Considerar:
-latência
-LGPD de cada país
-custos
-oferta de serviços

Configurar alerta de custo/fatura #Cloudwatch
Configurar usuários e contas #IAM
-1 conta somente para ser o host do AWS
-1 conta com quase os mesmos privilégios para desenvolver (redundância na segurança)

Role - Ao criar a EC2 você deve definir a role (conjuntos de permissões da sua EC2)

EC2 - Instâncias - Executar nova insctância

RDS - Relational database
DynamoDB - Banco nosql
S3 - armazenamento de qualquer arquivo (drive)

Autoscaling #tipo de criação das instâncias EC2 que automaticamente irá escalar os recursos físicos de acordo com a demanda

AWS FIS - Simulador de falhas/stress

IaaC #infrastructure as a code, faz as configs de criar uma ou várias EC2s a partir de código e não dos paineis de config na aws

Cloud formation, stacks, upload do json ou yml com o codigo IaaC #permite versionamento, auditoria e compartilhar a infra

CI/CD - Continuous integration and delivery

Code deploy - executa um pipeline #é necessário atualizar a role com as permissões de deploy